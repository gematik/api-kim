openapi: 3.0.3
info:
  title: I_AccountManager_Service
  description:  Über diese Schnittstelle wird der KIM Account verwaltet.
  #  Für alle Operationen muss der Zeichensatz "utf-8” unterstützt werden.
  version: 2.3.1
  ### 2.3.1
  # KIM 1.5.3 changes
  # - values for regStat defined (registered and deregistered)
  # - parameter password in createCert is optional (description changed)
  # - descriptions changed
  # - read only parameter in setAccount removed
  # - new parameter appTags in registerAccount and setAccount
  # - added traceId to Error object
  ### 2.3.0
  # - change server url to new api version
  # - added /account/{username}/revokeDeregistration
  #   to allow customers to revoke the deregistration process
  # - changed description for externalDoc to Github
  # - added status Code 502 for operation createCert in case the account manager acts as a proxy
  # - added status Code 403 for operation setTID in case the token is not valid
  # - added format int64 for deregDate property
  # - changed otp property to lowercase and added password as format
  # - added response code 404 for getOTP in case e-mail account does not exist
  # - added response code 404 for deregisterAccount in case e-mail account does not exist
  ### 2.2.0
  # - updated url to https://account-manager.hrst1.kim.telematik/AccountMgmt/v2.2
  # - changed /components/schemas/Account:
  #   added parameter dataTimeToLive & maxMailSize
  #   specified kimVersion with enum
  # - changed operation createCert:
  #   added error codes 400 & 404
  ### 2.0.0
  # - included new operations for outOfOffice
  # - included new operations for porting an e-mail address to new telematikID
  # - removed operations: register_State, cm_version and pw_change
  # - added new operations setAccount and getAccount
  # - renamed and updated operations for user account (e.g. registerAccount and
  #   deregisterAccount)
  # - added operation createCert to generate PKCS#12 files
  # - added HTTP error code 500
  # - changed authentication to JWT
  ### 1.2.0
  # - added parameter "cert" to all operations. It includes the auth certificate to sign the operation. This is necessary to check the sign from the Server.
  # - adjusted some tags
  # - more specified parameter "username" (email & maxlength)
  # - changed response code of the operation "register" from 200 - OK to 201 - created
  # - changed http method in operation "deregister" from PUT to DELETE
  # - changed http method in operation "cm_version" from GET to PUT
  # - changed response in operation "register_state" to JSON format
  ### 1.1.2
  # - added parameter "referenceID" in operation "register"
  ### 1.1.1
  # - extended URI to interface releases
  ### 1.1.0
  # - added authentication with HBA/SMC-B
  ### 1.0.0
  # - initial Version of I_AccountManager_Service

externalDocs:
  description: Github Dokumentation
  url: https://github.com/gematik/api-kim
servers:
- url: https://account-manager.hrst1.kim.telematik/AccountMgmt/v2.3/
  # <hrst1> ist der Platzhalter für den Fachdienstbetreiber
tags:
- name: Email-Account
- name: Certificate
- name: Out of Office Notification

security:
  - bearerAuth: []
    # Die Authentisierung erfolgt für alle Operatiponen über ein JWT

paths:
##--
##------
  /account:
    post:
      tags:
      - Email-Account
      summary: Registriert einen neuen Email Account.
            #  In allen Fehlerfällen wird der Account nicht erzeugt.
      operationId: registerAccount
      parameters:
        - in: header
          name: iniPassword
          description: Initiales Passwort für den Email-Account
          required: true
          schema:
             type: string
             format: password
      requestBody:
        description: Registriert neuen Account
        content:
          application/json:
              schema:
                type: object
                properties:
                  referenceID:
                    type: string
                    maxLength: 256
                    #writeOnly: true
                    description: Der KIM Anbieter legt die referenceID fest und teilt sie dem KIM Teilnehmer mit.
                                Es kann z.B. eine Vertragsnummer oder einen Registrierungscode enthalten sein.
                                Der KIM Anbieter muss seine KIM Teilnehmer über die Nutzung dieses Parameters informieren.
                                Alle Administrationsmodule (bzw. Clientmodule) müssen diesen Parameter - wegen der
                                Interoperabilität mit allen KIM Fachdiensten - unterstützen. Durch die "setAccount"
                                Operation ist dieser Wert nicht änderbar.
                  username:
                    type: string
                    description: Der username kann nur durch die "registerAccount" Operation gesetzt werden.
                                Durch die "setAccount" Operation ist dieser Wert nicht änderbar.
                    format: email
                  password:
                    type: string
                    format: password
                    description: Der KIM Teilnehmer gibt hier das Passwort an, das nach der initialen Registrierung
                                für diesen Mail-Account gilt.
                  kimVersion:
                    type: string
                    maxLength: 4
                    example: 1.5
                  appTags:
                    type: array
                    items:
                      type: string
                    description: Der Parameter appTags enthält alle Anwendungskennzeichen, die der Mail-Adresse
                                zugeordnet werden.
                                Pro Form-Part wird genau ein Anwendungskennzeichen angegeben. Bei mehreren Anwendungskennzeichen
                                wird der Form-Part mehrfach angegeben (exploded=true).
        required: true

      responses:
        204:
          description: Account erfolgreich registriert.
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen
                    # Die Authentifizierung über referenceID/iniPassword und Signatur des Operation ist fehlgeschlagen.
                    # Dieser Fehler tritt auch auf, wenn die referenceID nicht zum AUT-Zertifikat (cert) der Signatur passt oder nicht angegeben wurde.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Konflikt mit bereits bestehenden Account mit identischer e-mail (e-mail Adresse bereits vergeben).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        420:
          description: Username oder Passwort entsprechen nicht den Regeln.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: kimVersion nicht unterstützt bzw. unbekannt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
##--
##------
  /account/{username}:
    put:
      tags:
      - Email-Account
      summary: Account ändern.
              Die Werte von nicht angegebenen schreibbaren Parametern werden nicht verändert.
              # referenceID & username (im Body) können über dieser Operation nicht geändert werden
      operationId: setAccount
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Account'
             # Bei Passwortwechsel ist das "alte" Passwort Im Header dieser Operation enthalten.
             # Das neue Passwort ist "password" Parameter im Body der Operation enthalten.

      responses:
        204:
          description: Änderung des Accounts erfolgreich.
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        420:
          description: Neues Passwort entspricht nicht den Regeln.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: kimVersion nicht unterstützt bzw. unbekannt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Feler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Email-Account
      summary: Deregistriert einen Mailaccount
      operationId: deregisterAccount
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password

      responses:
        204:
          description: Account erfolgreich deregistriert
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
      - Email-Account
      summary: Anzeige des Accounts
      operationId: getAccount
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      responses:
        200:
          description: Anzeige des Accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Der username kann nur durch die "registerAccount" Operation gesetzt werden. Durch
                                die "setAccount" Operation ist dieser Wert nicht änderbar.
                    format: email
                  kimVersion:
                    type: string
                    maxLength: 4
                    example: 1.5
                  regStat:
                    type: string
                    maxLength: 512
                    readOnly: true
                    example: registered
                    description: Der Registrierungsstatus des Accounts. Gültige Werte sind registered und deregistered.
                  deregDate:
                    type: integer
                    format: int64
                    example: 1616588543
                    readOnly: true
                    description: Bestätigtes Kündigungsdatum (Unix Timestamp)
                  maxMailSize:
                    type: integer
                    format: int64
                    minimum: 734003200
                    example: 734003200
                    readOnly: true
                    description: Gibt die maximale Größe einer KIM-Mail in Bytes an
                  appTags:
                    type: array
                    items:
                      type: string
                    description: Gibt die Liste aller Anwendungskennzeichen, die der Mail-Adresse
                                zugeordnet sind, zurück.
                  dataTimeToLive:
                    type: integer
                    maxLength: 3
                    minimum: 10
                    maximum: 365
                    default: 90
                    example: 90
                    description: Speicherdauer von Mails und Anhängen auf dem KAS Fachdienst/KAS. Angabe in Tagen.

        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Mail Account nicht vorhanden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
##--
##------
  /account/{username}/revokeDeregistration:
    put:
      tags:
      - Email-Account
      summary: Deregistrierung des Accounts zurücknehmen
      operationId: revokeDeregistration
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      responses:
        204:
          description: Deregistrierung erfolgreich zurückgenommen
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Email Account wurde bisher nicht deregistriert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Mail Account nicht vorhanden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
##--
##------
  /account/{username}/OTP:
    get:
      tags:
      - Porting
      summary: Die Operation wird verwendet für die Portierung der e-mail Adresse zu einer neuen telematikID.
              Dafür wird ein One Time Password ausgestellt.
      operationId: getOTP
      description: Diese Operation erzeugt für den KIM Account/e-Mail Adresse ein One Time Password (OTP),
                  mit dem die e-Mail Adresse zu einer telematikID (Karte) portiert werden kann.
                  Die Authentisierung erfolgt mit der bisherigen Karte.
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password

      responses:
        200:
          description: OTP erfolgreich erzeugt.
          content:
           application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  format: password
                  description: One Time Password für die Portierung der KIM Mail Adresse zu einer anderen telematikID.

        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

##--
##------
  /account/{username}/telematikID:
    put:
      tags:
      - Porting
      summary: Portierung der e-mail Adresse zu einer neuen telematikID
      operationId: setTID
      description: Diese Operation entfernt die e-mail Adresse vom bisherigen VZD Eintrag und trägt die e-mail Adresse
                  in den neuen VZD Eintrag ein (der den Authentisierungsdaten dieser Operation setTID
                  entspricht). Die Authentisierung erfolgt mit der neuen Karte.
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      - in: header
        name: otp
        description: One Time Passwort (OTP) (von getOTP zurückgegeben)
        required: true
        schema:
          type: string
          format: password

      responses:
        204:
          description: Änderung der TelematikID erfolgreich.
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Invalides OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        408:
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: VZD nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

##--
##------
  /account/{username}/cert:
    post:
      tags:
      - Certificate
      summary: Create TLS AUT certificate
      operationId: createCert
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/CertificateParameters'

      responses:
        200:
          description: Zertifikat wird zurückgegeben.
          content:
           application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Base64-encoded PKCS#12 Container. Wenn im Request ein Passwort übergeben wurde,
                              dann ist der Container mit dem Passwort geschützt.
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
                      # z.B. kein CommonName oder kein CertPassword angegeben
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
                      # z.B. user not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: CMP-Service nicht erreichbar bzw. liefert Fehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
##--
##------
  /account/{username}/outofoffice:
    get:
      tags:
      - Out of Office Notification
      summary: Read the Out of Office Notification
      operationId: getOutOfOffice
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password

      responses:
        200:
          description: Lesen der Abwesenheitsnotiz erfolgreich.
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/OutOfOfficeNotification'
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
      - Out of Office Notification
      summary: Update the Out of Office Notification
      operationId: updateOutOfOffice
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          type: string
          format: email
      - in: header
        name: password
        description: Passwort für den Email-Account
        required: true
        schema:
          type: string
          format: password
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/OutOfOfficeNotification'
      responses:
        204:
          description: Änderung der Abwesenheitsnotiz erfolgreich.
        400:
          description: Fehler in den Eingangsdaten, Beschreibung des Fehlers erfolgt in dem Fehlertext
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentifizierung fehlgeschlagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Email Account nicht vorhanden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:

    Error:
      type: object
      properties:
        message:
          type: string
        traceId:
          type: string
          maxLength: 255
          example: 19aaf69260f63694
          description: Eindeutige Zeichenkette zur Rückverfolgung des Fehlers im Fachdienst

    Account:
      type: object
      properties:
        password:
          type: string
          format: password
          writeOnly: true
          description: Der KIM Teilnehmer kann sein Passwort ändern.
        kimVersion:
          type: string
          maxLength: 4
          example: 1.5+
          description: Der KIM Teilnehmer kann seine KIM Version ändern. Der Wertebereich der unterstützten
                      KIM Versionen soll vom Clientmodul vorgegeben werden.
        appTags:
          type: array
          items:
            type: string
          description: Der Parameter appTags enthält alle Anwendungskennzeichen, die der Mail-Adresse
                      zugeordnet werden.
                      Pro Form-Part wird genau ein Anwendungskennzeichen angegeben. Bei mehreren Anwendungskennzeichen
                      wird der Form-Part mehrfach angegeben (exploded=true). Wenn kein Anwendungskennzeichen angegeben
                      ist, dann werden bereits bestehende Anwendungskennzeichen gelöscht.

        dataTimeToLive:
          type: integer
          maxLength: 3
          minimum: 10
          maximum: 365
          default: 90
          example: 90
          description: Speicherdauer von Mails und Anhängen auf dem KAS Fachdienst/KAS. Angabe in Tagen.
                      Der KIM Teilnehmer kann den Wert ändern.

    CertificateParameters:
      type: object
      properties:
        commonName:
          type: string
          writeOnly: true
          description: Wird im Zertifikat als commonName aufgenommen
                        Dieses Zertifikat wird auch als TLS Server Zertifikat für die Verbindung mit dem Client/Primärsystem
                        genutzt. Für eine erfolgreiche Zertifikatsprüfung - durch den Client - muss im commonName der Server
                        Name des Clientmoduls stehen (so wie er konfiguriert ist, z.B. example.com, www.example.com)
        certPassword:
          type: string
          format: binary
          writeOnly: true
          description: base64 kodiertes Passwort für den PKCS#12 Container in dem das Zertifikat transportiert wird.
                      Wenn kein certPassword angegeben ist, dann wird der PKCS#12 Container nicht verschlüsselt.

    OutOfOfficeNotification:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          example: 2021-07-20T17:32:28Z
          description: Ab diesem Zeitpunkt wird die Abwesenheitsnotiz versendet
        endDate:
          type: string
          format: date-time
          example: 2021-07-28T17:32:28Z
          description: Nach diesem Zeitpunkt wird die Abwesenheitsnotiz nicht mehr versendet
        message:
          type: string
          description: Inhalt der Abwesenheitsnotiz.
        active:
          type: boolean
          description: Aktiviert bzw. deaktiviert die Abwesenheitsnotiz.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
       # Das JWT wird in compact serialization (RFC 7515, Section 3.1) kodiert und im HTTP-Header Authorization nach dem Bearer-Schema übertragen.
